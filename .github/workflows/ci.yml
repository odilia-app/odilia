name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-${{ matrix.target }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-build-${{ env.cache-name }}-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          target: ${{ matrix.target }}

      - name: Install Dependencies
        run: sudo apt -y install at-spi2-core systemd dunst xvfb libevdev-dev libx11-dev libxi-dev libxtst-dev
      - name: setup dbus and notification daemon
        run:
          sudo systemctl start dbus;
          systemctl --user start dbus;
          xvfb-run dunst --screen 0 600x400x8 &
      - name: Run tests
        # we need to run in release because proptests are slow;
        # if you think compiling is slow, try running proptests without release mode :)
        run: cargo test --workspace --release --features proptest
  deny:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Run cargo deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          # do not check sources; as this will almost always error due to stale windows' dependencies that we don't need.
          command: check license advisories bans
  clippy:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install dependencies
        run:
          sudo apt -y install libevdev-dev libx11-dev libxi-dev libxtst-dev
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: clippy

      - name: Run tests
        run: cargo clippy --tests --workspace --no-deps -- -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - name: Run formatter
        run: cargo fmt --all --check

  rustdoc:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Install dependencies
        run:
          sudo apt -y install libevdev-dev libx11-dev libxi-dev libxtst-dev

      - name: Generate Documentation
        run: cargo doc --workspace --document-private-items

      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.PAGES_DEPLOY_KEY }}
          external_repository: odilia-app/odilia-app.github.io
          publish_dir: ./target/doc
          destination_dir: doc/devel
          keep_files: true
          user_name: github-actions
          user_email: actions@github.com
          publish_branch: main
        if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}
  coverage:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-${{ matrix.target }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: llvm-tools
      - name: cargo install llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Install Dependencies
        run: sudo apt -y install at-spi2-core systemd dunst xvfb
      - name: setup dbus and notification daemon
        run:
          sudo systemctl start dbus;
          systemctl --user start dbus;
          xvfb-run dunst --screen 0 600x400x8 &
      - name: cargo llvm-cov
        run: cargo llvm-cov --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_fail: true

  nix:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Run tests
        run: nix develop --command cargo build --tests --workspace -- -D warnings
